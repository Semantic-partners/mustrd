@prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sh:        <http://www.w3.org/ns/shacl#> .
@prefix xsd:       <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ex:        <http://www.example.org/#> .
@prefix owl:       <http://www.w3.org/2002/07/owl#> .
@prefix must:      <https://mustrd.com/model/> .

must:
    sh:declare [ sh:prefix    "must" ;
                 sh:namespace "https://mustrd.com/model/"^^xsd:anyURI ; ] .


must:TestSpecShape
    a              sh:NodeShape ;
    sh:targetClass must:TestSpec ;
    sh:property    [ sh:path     must:given ;
                     sh:class    must:Dataset ;
                     sh:minCount 1 ; ] ;
    sh:property    [ sh:path     must:when ;
                     sh:class    must:SparqlSource ;
                     sh:minCount 1 ; ] ;
    sh:property    [ sh:path     must:then ;
                     sh:class    must:Dataset ;
                     sh:minCount 1 ; ] .


must:UpdateTestSpecThenValidationShape
    a         sh:NodeShape ;
    sh:target [ a           sh:SPARQLTarget ;
                sh:prefixes must: ;
                sh:select   """
			SELECT ?this
			WHERE {
				?this a must:TestSpec .
				?this must:when/must:queryType must:UpdateSparql .
			}
			""" ; ] ;
    sh:message "An invalid then clause with a tabular data format has been specified for a SPARQL update test." ;
    sh:or   ( [ sh:path     must:then ;
                  sh:class    must:StatementsDataset ;
                  sh:minCount 1 ; ]
                [ sh:path     must:then ;
                  sh:class    must:EmptyGraph ;
                  sh:minCount 1 ; ]
                [ sh:path     must:then ;
                  sh:class    must:FileDataset ;
                  sh:minCount 1 ; ]
                [ sh:path     must:then ;
                  sh:class    must:FolderDataset ;
                  sh:minCount 1 ; ]
                [ sh:path     must:then ;
                  sh:class    must:GraphDataset ;
                  sh:minCount 1 ; ] )
   .

must:UpdateTestSpecGivenValidationShape
    a         sh:NodeShape ;
    sh:target [ a           sh:SPARQLTarget ;
                sh:prefixes must: ;
                sh:select   """
			SELECT ?this
			WHERE {
				?this a must:TestSpec .
				?this must:when/must:queryType must:UpdateSparql .
			}
			""" ; ] ;
        ;
    sh:message "An invalid given clause with an inherited dataset has be specified for a SPARQL update test." ;
    sh:not    [ sh:path     must:given ;
                     sh:class    must:InheritedDataset ;
                      ]  .

must:SelectTestSpecShape
    a         sh:NodeShape ;
    sh:target [ a           sh:SPARQLTarget ;
                sh:prefixes must: ;
                sh:select   """
			SELECT ?this
			WHERE {
				?this a must:TestSpec .
				?this must:when/must:queryType must:SelectSparql .
			}
			""" ; ] ;
    sh:message "An incompatible where clause has be specified for a SPARQL select test. The format of the result should be tabular " ;
    sh:or   ( [ sh:path     must:then ;
                  sh:class    must:TableDataset ;
                  sh:minCount 1 ; ]
                [ sh:path     must:then ;
                  sh:class    must:EmptyTable ;
                  sh:minCount 1 ; ]
               [ sh:path     must:then ;
                  sh:class    must:FolderDataset ;
                  sh:minCount 1 ; ]
                [ sh:path     must:then ;
                  sh:class    must:FileDataset ;
                  sh:minCount 1 ; ] )
     .

must:StatementsDatasetShape
    a              sh:NodeShape ;
    sh:targetClass must:StatementsDataset ;
    sh:property    [ sh:path     must:hasStatement ;
                     sh:node     must:StatementShape ;
                     sh:minCount 1 ; ] .

must:TableDatasetShape
    a              sh:NodeShape ;
    sh:targetClass must:TableDataset ;
    sh:property    [ sh:path     must:hasRow ;
                     sh:node     must:RowShape ;
                     sh:minCount 1 ; ] .

must:OrderedTableDatasetShape
    a              sh:NodeShape ;
    sh:targetClass must:OrderedTableDataset ;
    sh:property    [ sh:path     must:hasRow ;
                     sh:node     must:OrderedRowShape ;
                     sh:minCount 2 ; ] .

must:FileDatasetShape
    a              sh:NodeShape ;
    sh:targetClass must:FileDataset ;
    sh:property    [ sh:path     must:file ;
                     sh:datatype xsd:string ;
                     sh:minCount 1 ;
                     sh:maxCount 1 ; ] .

must:StatementShape
    a              sh:NodeShape ;
    sh:targetClass rdf:Statement ;
    sh:property    [ sh:path     rdf:subject ;
                     sh:minCount 1 ; ] ;
    sh:property    [ sh:path     rdf:predicate ;
                     sh:minCount 1 ; ] ;
    sh:property    [ sh:path     rdf:object ;
                     sh:minCount 1 ; ] .

must:SparqlSourceShape
    a              sh:NodeShape ;
    sh:targetClass must:SparqlSource ;
    sh:property    [ sh:path     must:queryType ;
                     sh:minCount 1 ;
                     sh:maxCount 1 ; ] .

must:UpdateSparqlShape
    a              sh:NodeShape ;
    sh:targetClass must:SparqlSource ;
    sh:property    [ sh:path        must:queryType ;
                     sh:targetClass must:UpdateSparql ;
                     sh:minCount    1 ;
                     sh:maxCount    1 ; ] .

must:SelectSparqlShape
    a              sh:NodeShape ;
    sh:targetClass must:SparqlSource ;
    sh:property    [ sh:path        must:queryType ;
                     sh:targetClass must:SelectSparql ;
                     sh:minCount    1 ;
                     sh:maxCount    1 ; ] .

must:ConstructSparqlShape
    a              sh:NodeShape ;
    sh:targetClass must:SparqlSource ;
    sh:property    [ sh:path        must:queryType ;
                     sh:targetClass must:ConstructSparql ;
                     sh:minCount    1 ;
                     sh:maxCount    1 ; ] .

must:TextSparqlSourceShape
    a              sh:NodeShape ;
    sh:targetClass must:TextSparqlSource ;
    sh:property    [ sh:path     must:queryText ;
                     sh:minCount 1 ;
                     sh:maxCount 1 ; ] .


must:VariableBindingShape
    a              sh:NodeShape ;
    sh:targetClass must:Binding ;
    sh:property    [ sh:path     must:variable ;
                     sh:minCount 1 ;
                     sh:maxCount 1 ; ] ;
    sh:property    [ sh:path     must:boundValue ;
                     sh:minCount 1 ;
                     sh:maxCount 1 ; ] .

must:RowShape
    a              sh:NodeShape ;
    sh:targetClass must:Row ;
    sh:property    [ sh:path     must:hasBinding ;
                     sh:node     must:VariableBindingShape ;
                     sh:minCount 1 ; ] .

must:OrderedRowShape
    a              sh:NodeShape ;
    sh:targetClass must:Row ;
    sh:property    [ sh:path     sh:order ;
                     sh:minCount 2 ; ] ;
    sh:property    [ sh:path     must:hasBinding ;
                     sh:node     must:VariableBindingShape ;
                     sh:minCount 2 ; ] .



